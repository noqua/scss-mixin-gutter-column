// こちらがカラム設定用Mixin
@mixin col(
	$column-count,
	$column-margin	: margin(),
	$selector		: '.item',
	$is-type		: flex,
	$is-list		: false
) {

	@if $is-list == true {
		// reset default margin,padding
		margin-left: 0;
		margin-right: 0;
		padding-left: 0;
		padding-right: 0;
		// end reset styles
		$selector : '> li';

		#{$selector} {
			list-style-position: inside;
		}
	}

	#{$selector} {
		box-sizing: border-box;
	}

	// if is flex/float, define width
	@if $is-type == flex or $is-type == float {
		$margin-size : #{$column-margin * ($column-count - 1)};

		#{$selector} {
			width: calc((100% - #{$margin-size}) / #{$column-count});
			@content;

			&:not(:nth-of-type(#{$column-count}n)) {
				margin-right: $column-margin;
			}
		}
	} // end

	// is Flexbox(default)
	@if $is-type == flex {
		display: flex;
		flex-wrap: wrap;
		justify-content: flex-start;
	} // end is Flexbox

	// is CSS Grid
	@else if $is-type == grid {
		display: grid;
		display: -ms-grid;

		// IE,Edge
		$grid-columns : '';
		@for $count from 1 through $column-count {
			@if $count == 1 {
				$grid-columns : unquote('1fr');
			} @else {
				$grid-columns : unquote($grid-columns + ' 1fr');
			}
		}

		grid-template-columns: repeat($column-count, 1fr);
		grid-gap: $column-margin;
		-ms-grid-columns: $grid-columns;
		-ms-grid-rows: auto;

		#{$selector} {
			@content;
		}
	} // end is CSS Grid

	// is Float
	@else if $is-type == float {
		&:before,&:after { content: ''; display: table;}
		&:after {clear: both;}
		zoom: 1;

		#{$selector} {
			float: left;
		}
	} // end is Float
}